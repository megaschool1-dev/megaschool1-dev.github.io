@page "/events"
@using Blazored.LocalStorage
@using MegaSchool1.Components
@using MegaSchool1.Model
@using MegaSchool1.Model.Dto
@using MegaSchool1.ViewModel
@using Mappers = MegaSchool1.Mappers
@inherits Components.ComponentBase
@inject UISettings UI
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject Repository.Repository Repo

<MudStack>
    @foreach(var day in _events.Where(e => e.Day != null).Select(e => e.Day).Distinct().OrderBy(day => day))
    {
        <br />
        <br />
        <div id="@day">
            <MudText Typo="Typo.h3" GutterBottom="true" Align="Align.Center">@day</MudText>
            <MudStack>
                @foreach (var recurringEvent in _events.Where(e => e.Day == day).OrderBy(e => e.Time))
                {
                    <div id="@recurringEvent.Anchor">
                        <RecurringEvent Header="@recurringEvent.Header"
                                        Id="@recurringEvent.Anchor"
                                        Archive="@recurringEvent.Archive"
                                        Url="@recurringEvent.Link"
                                        Password="@recurringEvent.Password"
                                        ImageUri="@recurringEvent.Image"
                                        Recurrence="@((recurringEvent.Day, recurringEvent.Time, Constants.DefaultTimeZone))"
                                        LivestreamPlatform="@((recurringEvent.Anchor, recurringEvent.LivestreamPlatform))"
                                        LivestreamPlatformSelectionChanged="OnLivestreamPlatformSelectionChanged"
                                        Text="@($"{recurringEvent.ShareableHeader}{Environment.NewLine}{Environment.NewLine}{(recurringEvent.ShareableHost == null ? string.Empty : $"Hosted By:{Environment.NewLine}{recurringEvent.ShareableHost}{Environment.NewLine}{Environment.NewLine}")}{(recurringEvent.ShareableGuest == null ? string.Empty : $"Featuring:{Environment.NewLine}{recurringEvent.ShareableGuest}{Environment.NewLine}{Environment.NewLine}")}{GetNextEvent(recurringEvent.Day!.Value, recurringEvent.Time, Constants.DefaultTimeZone):dddd, MMMM d}{Environment.NewLine}{Environment.NewLine}{Util.GetRegionalTimes(GetNextEvent(recurringEvent.Day!.Value, recurringEvent.Time, Constants.DefaultTimeZone))}{Environment.NewLine}{Environment.NewLine}Go to:{Environment.NewLine}{recurringEvent.VanityLink}{(recurringEvent.MeetingId == null ? string.Empty : $"{Environment.NewLine}{Environment.NewLine}ID: {recurringEvent.MeetingId}")}{(recurringEvent.Password == null ? string.Empty : $"{Environment.NewLine}{Environment.NewLine}Password: {recurringEvent.Password}")}{Environment.NewLine}{Environment.NewLine}{recurringEvent.HashTags}")" />
                    </div>
                }
            </MudStack>
        </div>
    }
</MudStack>
@code {
    private static Repository.Model.Settings? Settings;

    private EventViewModel[] _events = [];

    protected override async Task OnInitializedAsync()
    {
        if (this.NavigateToProspectPageIfApplicable())
        {
            return;
        }

        var generatedDailyEvents = new List<EventDto>();
        var eventMapper = new Mappers();

        var dailyEvents = UI.EnglishLocale.Events.Where(e => e.Day == null).ToArray();
        foreach (var dailyEvent in dailyEvents)
        {
            foreach (var dayOfWeek in Enum.GetValues<DayOfWeek>())
            {
                var nextEventOnDayOfWeek = GetNextEvent(dayOfWeek, dailyEvent.Time, Constants.DefaultTimeZone);
                if (nextEventOnDayOfWeek <= dailyEvent.EndDate)
                {
                    generatedDailyEvents.Add(dailyEvent with { Day = dayOfWeek });
                }
            }
        }

        _events = UI.EnglishLocale.Events
            .Except(dailyEvents)
            .Union(generatedDailyEvents)
            .Select(e => eventMapper.EventDtoToEventViewModel(e))
            .ToArray();

        var settings = await Repo.GetSettingsAsync();
        settings.Switch(
            found =>
            {
                Settings = found;

                var defaultLivestreamPlatforms = new Repository.Model.Settings().LivestreamPlatformPreference;

                // set livestream link
                foreach (var eventViewModel in _events.Where(e => e.Link == Constants.MultiPlatformLivestreamUrlPlaceholder))
                {
                    // get livestream platform preference
                    var foundLivestreamPlatformPreference =
                    Settings.LivestreamPlatformPreference.TryGetValue(eventViewModel.Anchor!, out var livestreamPlatformPreference)
                    ||
                    defaultLivestreamPlatforms.TryGetValue(eventViewModel.Anchor!, out livestreamPlatformPreference);

                    if (foundLivestreamPlatformPreference)
                    {
                        eventViewModel.LivestreamPlatform = livestreamPlatformPreference;

                        // set corporate livestream platform preference
                        if (Constants.CorporateLivestreamLink.TryGetValue(livestreamPlatformPreference, out var livestreamLink))
                        {
                            eventViewModel.Link = livestreamLink;
                            eventViewModel.VanityLink = livestreamLink;
                        }
                    }
                }

                // auto-navigate to the current day if a specific anchor was not already specified
                if (!NavigationManager.Uri.Contains("#"))
                {
                    NavigationManager.NavigateTo($"{NavigationManager.BaseUri}events#{DateTime.Now.DayOfWeek}", true);
                }
            },
            notFound => { },
            error => { Console.WriteLine($"{this.GetType().FullName} - Failed to initialize events page{Environment.NewLine}{error.Value}"); }
        );
    }

    private async Task OnLivestreamPlatformSelectionChanged((string EventId, LivestreamPlatform Platform)? livestream)
    {
        // persist livestream platform preference
        var settings = await Repo.GetSettingsAsync();
        settings.Switch(
            async found =>
            {
                 found.LivestreamPlatformPreference[livestream?.EventId!] = livestream!.Value.Platform;
                 await Repo.SaveSettingsAsync(found);

                 // refresh UI
                 foreach (var livestreamEvent in _events.Where(e => e.Anchor == livestream?.EventId))
                 {
                     livestreamEvent.LivestreamPlatform = livestream!.Value.Platform;

                     if (Constants.CorporateLivestreamLink.TryGetValue(livestreamEvent.LivestreamPlatform, out var livestreamLink))
                     {
                         livestreamEvent.Link = livestreamLink;
                         livestreamEvent.VanityLink = livestreamLink;
                     }
                 }

                 this.StateHasChanged();
            },
            notFound => { Console.WriteLine($"{this.GetType().FullName} - No settings found in local storage!"); },
            error => { Console.WriteLine($"{this.GetType().FullName} - Failed to load settings{Environment.NewLine}{error.Value}"); }
        );
    }
}
